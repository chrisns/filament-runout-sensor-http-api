name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

    - name: Set up Python 3.11
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/test_simple_models.py tests/unit/test_simple_services.py -v --tb=short --no-header

    - name: Run linting
      run: |
        ruff check src/ tests/ || true

    - name: Test model imports
      run: |
        python -c "from src.models.sensor_reading import SensorReading; print('SensorReading imported')"
        python -c "from src.models.sensor_configuration import SensorConfiguration; print('SensorConfiguration imported')"
        python -c "from src.models.session_metrics import SessionMetrics; print('SessionMetrics imported')"
        python -c "from src.models.alert_event import AlertEvent; print('AlertEvent imported')"

  build:
    runs-on: windows-latest
    needs: test

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify model structure
      run: |
        python -c "from src.models.sensor_reading import SensorReading; r = SensorReading(sensor_id=1, has_filament=True, is_moving=False, distance_mm=0, pulse_count=0); print(f'Created reading: {r.filament_status}')"
        python -c "from src.models.sensor_configuration import SensorConfiguration; c = SensorConfiguration(); print(f'Config polling: {c.polling.polling_interval_ms}ms')"
        python -c "from src.models.session_metrics import SessionMetrics; m = SessionMetrics(); print(f'Session metrics created with {m.active_sensors} active sensors')"