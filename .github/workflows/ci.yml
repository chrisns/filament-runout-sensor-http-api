name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run unit tests
      run: |
        pytest tests/unit -v --tb=short --no-header

    - name: Run linting
      run: |
        ruff check src/ tests/ || true

    - name: Test imports
      run: |
        python -c "from src.models import SensorReading, SensorConfiguration"
        python -c "from src.services import SensorMonitor, DataAggregator"
        python -c "from src.lib.config import load_configuration"

  build:
    runs-on: windows-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify main application structure
      run: |
        python -c "import src.cli.main; print('CLI module loads successfully')"
        python -c "import src.models; print('Models module loads successfully')"
        python -c "import src.services; print('Services module loads successfully')"

    - name: Check configuration loading
      run: |
        python -c "from src.lib.config import load_default_configuration; config = load_default_configuration(); print(f'Default config loaded: polling={config.polling_interval_ms}ms')"

    - name: Test demo mode initialization
      run: |
        python -c "from src.services import SensorMonitor; monitor = SensorMonitor(demo_mode=True); print('Demo mode monitor created successfully')"